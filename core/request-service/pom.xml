<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>ru.practicum</groupId>
        <artifactId>core</artifactId>
        <version>0.0.1-SNAPSHOT</version>
    </parent>

    <artifactId>request-service</artifactId>

    <properties>
        <maven.compiler.source>21</maven.compiler.source>
        <maven.compiler.target>21</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <mapstruct.version>1.5.3.Final</mapstruct.version>
        <querydsl.version>5.1.0</querydsl.version>
        <mapstruct.version>1.5.3.Final</mapstruct.version>
    </properties>

    <dependencies>
        <dependency>
            <groupId>ru.practicum</groupId>
            <artifactId>interaction-api</artifactId>
            <version>${project.version}</version>
        </dependency>

        <dependency>
            <groupId>ru.practicum</groupId>
            <artifactId>stats-client</artifactId>
            <version>${project.version}</version>
        </dependency>

        <!--
            Базовый стартер Spring Boot для создания веб-приложений (REST, MVC, Embedded Tomcat и т.д.).
            Обеспечивает автонастройку и основные web-компоненты.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
        </dependency>

        <!--
            Стартер для интеграции с JPA и Hibernate. Упрощает работу с базами данных (DAO/репозитории, транзакции).
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jpa</artifactId>
        </dependency>

        <!--
            Стартер для использования Spring Actuator: метрики, точки мониторинга, health-check и другие диагностические эндпоинты.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-actuator</artifactId>
        </dependency>

        <!--
            Hibernate Validator — официальная реализация спецификации Bean Validation.
            Позволяет использовать аннотации валидации (например, @NotNull, @Size и т.д.) для проверки данных.
        -->
        <dependency>
            <groupId>org.hibernate.validator</groupId>
            <artifactId>hibernate-validator</artifactId>
        </dependency>

        <!--
            Apache HttpClient 5 — библиотека для выполнения HTTP-запросов (GET, POST и т.д.).
            Может использоваться при обращении к внешним REST-сервисам.
        -->
        <dependency>
            <groupId>org.apache.httpcomponents.client5</groupId>
            <artifactId>httpclient5</artifactId>
        </dependency>

        <!--
            Процессор конфигурации Spring Boot. Во время компиляции генерирует подсказки и метаданные
            (spring-configuration-metadata.json), которые облегчают работу IDE с пропертями (application.properties / application.yml).
            Ставится как optional или provided, чтобы не попадать в конечный рантайм-артефакт.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <optional>true</optional>
        </dependency>

        <!--
            Lombok — библиотека для генерации шаблонного кода (геттеры, сеттеры, конструкторы, Builder и т.д.) во время компиляции.
            Отмечена как optional, чтобы не попадать в финальный бандл.
        -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <optional>true</optional>
        </dependency>

        <!--
            Стартер для тестирования в Spring Boot (JUnit, Spring TestContext и т.д.).
            Обеспечивает удобный набор зависимостей для написания юнит- и интеграционных тестов.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <scope>test</scope>
        </dependency>

        <!--
            Драйвер PostgreSQL. Необходим для подключения к PostgreSQL-серверу.
        -->
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>

        <!--
            QueryDSL JPA (с пометкой jakarta) — библиотека для написания типобезопасных запросов к базе данных через JPA.
            Позволяет генерировать метамодель и использовать «флюентный» синтаксис для SQL-запросов.
        -->
        <dependency>
            <groupId>com.querydsl</groupId>
            <artifactId>querydsl-jpa</artifactId>
            <classifier>jakarta</classifier>
            <version>${querydsl.version}</version>
        </dependency>

        <!--
            Стартер для валидации (Bean Validation Starter). Дополняет функционал Hibernate Validator и поддерживает аннотации валидации.
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
        </dependency>


        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct</artifactId>
            <version>${mapstruct.version}</version>
        </dependency>

        <!--
            Процессор к MapStruct. Запускается во время компиляции, чтобы сгенерировать реализацию интерфейсов мапперов.
            scope=provided — не входит в финальный рантайм.
        -->
        <dependency>
            <groupId>org.mapstruct</groupId>
            <artifactId>mapstruct-processor</artifactId>
            <version>${mapstruct.version}</version>
            <scope>provided</scope>
        </dependency>

        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-netflix-eureka-client</artifactId>
        </dependency>

        <!-- Spring Cloud Config для загрузки внешней конфигурации -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-config</artifactId>
        </dependency>

        <!-- Spring Retry для автоматических повторов -->
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
        </dependency>

        <!-- Для реализации Circuit Breaker с помощью Resilience4j -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-circuitbreaker-resilience4j</artifactId>
        </dependency>

        <dependency>
            <groupId>io.github.resilience4j</groupId>
            <artifactId>resilience4j-spring-boot3</artifactId>
        </dependency>
        <dependency>
            <groupId>io.github.resilience4j</groupId>
            <artifactId>resilience4j-circuitbreaker</artifactId>
        </dependency>

    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
            </plugin>

            <plugin>
                <groupId>com.mysema.maven</groupId>
                <artifactId>apt-maven-plugin</artifactId>
                <version>1.1.3</version>
                <executions>
                    <execution>
                        <goals>
                            <goal>process</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>target/generated-sources/java</outputDirectory>
                            <processor>com.querydsl.apt.jpa.JPAAnnotationProcessor</processor>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.querydsl</groupId>
                        <artifactId>querydsl-apt</artifactId>
                        <classifier>jakarta</classifier>
                        <version>5.1.0</version>
                    </dependency>
                </dependencies>
            </plugin>

            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <version>3.3.0</version>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>add-source</goal>
                        </goals>
                        <configuration>
                            <sources>
                                <source>${project.build.directory}/generated-sources/java/</source>
                            </sources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>

</project>